AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to set up an AWS Lambda function for retrieving stock prices and storing logs in S3.

Resources:

  # --- Primary S3 Bucket for Stock Data ---
  StockDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "magnificent7-stock-data-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30

  # --- Secondary S3 Bucket for Logs ---
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "magnificent7-logs-${AWS::AccountId}"

  # --- IAM Role for Lambda ---
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaStockDataRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::magnificent7-stock-data-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::magnificent7-logs-${AWS::AccountId}/*"
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/STOCK_API_KEY"

  # --- Lambda Function (Code from mag-7-config bucket) ---
  StockLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchMagnificent7StockPrices
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Code:
        S3Bucket: mag-7-config
        S3Key: stock_data_lambda.zip

  # --- SSM Parameter for API Key ---
  StockApiKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "STOCK_API_KEY"
      Type: "String"
      Value: "API KEY GOES HERE" # Typically, this would be deployed in a separate stack altogether.For the purpose of the POC, it was deployed together.

  # --- CloudWatch Event to Trigger Lambda Every 6 Hours ---
  StockDataEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StockDataLambdaSchedule
      ScheduleExpression: "cron(0 */6 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt StockLambdaFunction.Arn
          Id: "StockDataLambdaTarget"

  # --- Permission for CloudWatch to Invoke Lambda ---
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StockLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StockDataEventRule.Arn

  # --- IAM Group granting read-only access to the Logs bucket ---
  AuditorsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: "AuditorsGroup"
      Policies:
        - PolicyName: "AuditorsLogsReadPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::magnificent7-logs-${AWS::AccountId}"
                  - !Sub "arn:aws:s3:::magnificent7-logs-${AWS::AccountId}/*"

  # --- Auditor Users ---
  Auditor01:
    Type: AWS::IAM::User
    Properties:
      UserName: "auditor01"
      Groups:
        - !Ref AuditorsGroup

  Auditor02:
    Type: AWS::IAM::User
    Properties:
      UserName: "auditor02"
      Groups:
        - !Ref AuditorsGroup

  # (Optional) Create access keys for the auditors
  Auditor01AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref Auditor01

  Auditor02AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref Auditor02

Outputs:
  StockDataBucket:
    Description: "S3 Bucket for stock data"
    Value: !Ref StockDataBucket

  LogBucket:
    Description: "S3 Bucket for log storage"
    Value: !Ref LogBucket

  LambdaFunction:
    Description: "Lambda function for fetching stock prices"
    Value: !Ref StockLambdaFunction

  IAMRole:
    Description: "IAM Role assigned to Lambda"
    Value: !Ref LambdaExecutionRole

  SSMParameter:
    Description: "SSM Parameter storing the API Key"
    Value: !Ref StockApiKey
